# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2022-04-20 18:13
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import tinymce.models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('tasks', '0009_draft'),
        ('training', '0017_auto_20220505_0831'),
    ]

    operations = [
        migrations.CreateModel(
            name='Solution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('course', 'Курс'), ('external', 'Внешний источник')], max_length=100, verbose_name='источник решения')),
                ('type_id', models.PositiveIntegerField(null=True, verbose_name='идентификатор источника решения')),
                ('type_name', models.CharField(max_length=255, null=True, verbose_name='название источника решения')),
                ('description', models.TextField(null=True, verbose_name='описание')),
                ('user_first_name', models.CharField(max_length=50, null=True, verbose_name='имя')),
                ('user_last_name', models.CharField(max_length=50, null=True, verbose_name='фамилия')),
                ('user_father_name', models.CharField(max_length=50, null=True, verbose_name='отчество')),
                ('user_email', models.CharField(max_length=100, null=True, verbose_name='почта')),
                ('user_username', models.CharField(max_length=200, null=True, verbose_name='логин')),
                ('task_name', models.CharField(max_length=500, verbose_name='название задачи')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='дата создания')),
                ('review_date', models.DateTimeField(null=True, verbose_name='дата проверки')),
                ('testing_score', models.FloatField(null=True, verbose_name='оценка')),
                ('count_tests', models.PositiveIntegerField(null=True, verbose_name='кол-во тестов')),
                ('count_passed_tests', models.PositiveIntegerField(null=True, verbose_name='кол-во пройденных тестов')),
                ('content', models.TextField(verbose_name='листинг решения')),
                ('translator', models.CharField(choices=[('Python3.8', 'Python 3.8'), ('GCC7.4', 'С++ (GCC 7.4)'), ('Prolog-D', 'Пролог-Д')], max_length=100, verbose_name='язык')),
                ('review_score', models.FloatField(null=True, verbose_name='оценка')),
                (
                    'review_status',
                    models.CharField(
                        choices=[
                            (None, 'нет'),
                            ('ready', 'ожидает проверки'),
                            ('review', 'в процессе проверки'),
                            ('done', 'проверено')
                        ],
                        null=True,
                        help_text='рассчитывается автоматически',
                        max_length=255,
                        verbose_name='статус'
                    )
                ),
                ('reviewer_first_name', models.CharField(max_length=50, null=True, verbose_name='имя преподавателя')),
                ('reviewer_last_name', models.CharField(max_length=50, null=True, verbose_name='фамилия преподавателя')),
                ('reviewer_father_name', models.CharField(max_length=50, null=True, verbose_name='отчество преподавателя')),
                ('reviewer_comment', tinymce.models.HTMLField(blank=True, null=True, verbose_name='комментарий преподавателя')),
                ('hide_review_score', models.BooleanField(default=False, verbose_name='скрыть оценку')),
                ('hide_reviewer_comment', models.BooleanField(default=False, verbose_name='скрыть комментарий')),
                ('max_score', models.PositiveIntegerField(verbose_name='максимальный балл за решение', null=True)),
                ('external_source_name', models.CharField(default='сайт', max_length=100, null=True, verbose_name='источник решения')),
                ('score_method', models.CharField(
                        choices=[
                            ('tests', 'Тестирование кода'),
                            ('review', 'Проверка преподавателем'),
                            ('tests_and_review', 'Тестирование и проверка')
                        ],
                        default='tests',
                        max_length=50,
                        verbose_name='метод оценивания'
                    )
                ),
                ('due_date', models.DateTimeField(null=True, verbose_name='срок сдачи')),
            ],
            options={
                'verbose_name': 'решение задачи',
                'verbose_name_plural': 'решения задач',
                'ordering': ('-last_modified',),
            },
        ),
        migrations.AlterModelOptions(
            name='source',
            options={'ordering': ('name',), 'verbose_name': 'внешний источник', 'verbose_name_plural': 'внешние источники'},
        ),
        migrations.AlterField(
            model_name='draft',
            name='translator',
            field=models.CharField(choices=[('Python3.8', 'Python 3.8'), ('GCC7.4', 'С++ (GCC 7.4)'), ('Prolog-D', 'Пролог-Д')], max_length=100),
        ),
        migrations.AlterField(
            model_name='source',
            name='name',
            field=models.CharField(max_length=255, verbose_name='название'),
        ),
        migrations.AddField(
            model_name='solution',
            name='external_source',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='solutions', to='tasks.Source', verbose_name='внешний источник решения'),
        ),
        migrations.AddField(
            model_name='solution',
            name='reviewer',
            field=models.ForeignKey(help_text='заполняется автоматически, когда преподаватель выставляет оценку', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_solutions', to=settings.AUTH_USER_MODEL, verbose_name='преподаватель'),
        ),
        migrations.AddField(
            model_name='solution',
            name='task',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='solutions', to='tasks.Task', verbose_name='задача'),
        ),
        migrations.AddField(
            model_name='solution',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='solutions', to=settings.AUTH_USER_MODEL, verbose_name='пользователь'),
        ),
        migrations.RunSQL("""
        INSERT INTO tasks_solution (
            type,
            type_id,
            type_name,
            created,
            review_date,
            testing_score,
            review_score,
            review_status,
            count_tests,
            count_passed_tests,
            content,
            translator,
            reviewer_comment,
            reviewer_id,
            reviewer_first_name,
            reviewer_last_name,
            task_id,
            task_name,
            user_id,
            user_first_name,
            user_last_name,
            user_email,
            user_username,
            max_score,
            hide_review_score,
            hide_reviewer_comment,
            score_method,
            due_date
        ) SELECT
            'course',
            course.id,
            course.title,
            s.last_modified,
            CASE
                WHEN s.manual_score IS NULL THEN NULL
                ELSE s.last_modified
            END,
            s.tests_score,
            s.manual_score,
            CASE 
                WHEN s.manual_status = '1' THEN 'ready'
                WHEN s.manual_status = '2' THEN 'review'
                WHEN s.manual_status = '3' THEN 'checked'
                ELSE NULL
            END,
            json_array_length(tat.tests::json),
            CASE
                WHEN s.tests_score IS NOT NULL THEN
                    round(
                        (s.tests_score * json_array_length(tat.tests::json))/tt.max_score
                    )
                ELSE 0
            END,
            s.content,
            s.translator,
            s.comment,
            s.teacher_id,
            CASE
                WHEN s.teacher_id IS NOT NULL THEN r.first_name
                ELSE NULL
            END,
            CASE
                WHEN s.teacher_id IS NOT NULL THEN r.last_name
                ELSE NULL
            END,
            tt.task_id,
            tat.title,
            s.user_id,
            au.first_name,
            au.last_name,
            au.email,
            au.username,
            tt.max_score,
            FALSE,
            FALSE,
            CASE
                WHEN tt.manual_check IS TRUE AND tt.compiler_check IS TRUE
                    THEN 'tests_and_review'
                WHEN tt.manual_check IS TRUE THEN 'review'
                WHEN tt.compiler_check IS TRUE THEN 'tests'
            END,
            topic.due_date
        FROM training_solution s
            INNER JOIN training_taskitem tt ON s.taskitem_id = tt.id
            INNER JOIN training_topic topic ON tt.topic_id = topic.id
            INNER JOIN training_course course ON topic.course_id = course.id
            INNER JOIN tasks_task tat ON tt.task_id = tat.id
            INNER JOIN auth_user au ON s.user_id = au.id
            LEFT JOIN auth_user r ON s.teacher_id = r.id
    """),
        migrations.RunSQL("DELETE FROM tasks_solution WHERE content=''"),
    ]
