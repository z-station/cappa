# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2025-05-03 14:38
from __future__ import unicode_literals

import app.common.fields
from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('training', '0001_initial'),
        ('databases', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Checker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='заголовок')),
                ('description', models.TextField(verbose_name='описание')),
                ('content', models.TextField(help_text='def checker(right_value: str, value: str) -> bool:', verbose_name='Функция сверки решения')),
            ],
            options={
                'verbose_name': 'чекер',
                'verbose_name_plural': 'чекеры',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Draft',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('translator', models.CharField(choices=[('Python3.8', 'Python 3.8'), ('GCC7.4', 'С++ (GCC 7.4)'), ('Prolog-D', 'Пролог-Д'), ('PostgreSQL', 'PostgreSQL 13'), ('Pascal', 'PascalABC.NET')], max_length=100)),
                ('content', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Solution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('course', 'Курс'), ('taskbook', 'Задачник'), ('external', 'Внешний источник')], max_length=100, verbose_name='источник решения')),
                ('type_id', models.PositiveIntegerField(null=True, verbose_name='идентификатор источника решения')),
                ('type_name', models.CharField(max_length=255, null=True, verbose_name='название источника решения')),
                ('description', tinymce.models.HTMLField(null=True, verbose_name='описание')),
                ('user_first_name', models.CharField(max_length=50, null=True, verbose_name='имя')),
                ('user_last_name', models.CharField(max_length=50, null=True, verbose_name='фамилия')),
                ('user_father_name', models.CharField(max_length=50, null=True, verbose_name='отчество')),
                ('user_email', models.CharField(max_length=100, null=True, verbose_name='почта')),
                ('user_username', models.CharField(max_length=200, null=True, verbose_name='логин')),
                ('task_name', models.CharField(max_length=500, verbose_name='название задачи')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='дата создания')),
                ('score_method', models.CharField(choices=[('tests', 'Тестирование кода'), ('review', 'Проверка преподавателем'), ('tests_and_review', 'Тестирование и проверка')], default='tests', max_length=50, verbose_name='метод оценивания')),
                ('testing_score', models.FloatField(null=True, verbose_name='оценка')),
                ('count_tests', models.PositiveIntegerField(null=True, verbose_name='кол-во тестов')),
                ('count_passed_tests', models.PositiveIntegerField(null=True, verbose_name='кол-во пройденных тестов')),
                ('content', models.TextField(verbose_name='листинг решения')),
                ('translator', models.CharField(choices=[('Python3.8', 'Python 3.8'), ('GCC7.4', 'С++ (GCC 7.4)'), ('Prolog-D', 'Пролог-Д'), ('PostgreSQL', 'PostgreSQL 13'), ('Pascal', 'PascalABC.NET')], max_length=100, verbose_name='язык')),
                ('review_score', models.FloatField(null=True, verbose_name='оценка')),
                ('review_status', models.CharField(choices=[('ready', 'ожидает проверки'), ('review', 'в процессе проверки'), ('checked', 'проверено')], max_length=255, null=True, verbose_name='статус')),
                ('reviewer_first_name', models.CharField(max_length=50, null=True, verbose_name='имя преподавателя')),
                ('reviewer_last_name', models.CharField(max_length=50, null=True, verbose_name='фамилия преподавателя')),
                ('reviewer_father_name', models.CharField(max_length=50, null=True, verbose_name='отчество преподавателя')),
                ('reviewer_comment', tinymce.models.HTMLField(blank=True, null=True, verbose_name='комментарий преподавателя')),
                ('review_date', models.DateTimeField(null=True, verbose_name='дата проверки')),
                ('due_date', models.DateTimeField(null=True, verbose_name='срок сдачи')),
                ('hide_review_score', models.BooleanField(default=False, verbose_name='скрыть оценку')),
                ('hide_reviewer_comment', models.BooleanField(default=False, verbose_name='скрыть комментарий')),
                ('max_score', models.PositiveIntegerField(null=True, verbose_name='максимальный балл за решение')),
                ('external_source_name', models.CharField(default='сайт', max_length=100, null=True, verbose_name='источник решения')),
                ('rating_is_calculated', models.BooleanField(default=False, verbose_name='решение учтено в рейтинге')),
                ('score', models.FloatField(help_text='рассчитывается автоматически', null=True, verbose_name='итоговая оценка')),
            ],
            options={
                'verbose_name': 'решение задачи',
                'verbose_name_plural': 'решения задач',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='SolutionExample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('translator', models.CharField(choices=[('Python3.8', 'Python 3.8'), ('GCC7.4', 'С++ (GCC 7.4)'), ('Prolog-D', 'Пролог-Д'), ('PostgreSQL', 'PostgreSQL 13'), ('Pascal', 'PascalABC.NET')], max_length=100, verbose_name='транслятор кода')),
                ('content', models.TextField(blank=True, null=True, verbose_name='текст решения')),
            ],
            options={
                'verbose_name': 'эталонное решение',
                'verbose_name_plural': 'эталонные решения',
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='название')),
                ('description', models.TextField(blank=True, null=True, verbose_name='описание')),
            ],
            options={
                'verbose_name': 'внешний источник',
                'verbose_name_plural': 'внешние источники',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='имя')),
            ],
            options={
                'verbose_name': 'метка',
                'verbose_name_plural': 'метки',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_key', models.PositiveIntegerField(default=0, verbose_name='порядок')),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='дата последнего изменения')),
                ('show', models.BooleanField(default=False, verbose_name='отображать')),
                ('title', models.CharField(max_length=255, verbose_name='заголовок')),
                ('content', tinymce.models.HTMLField(blank=True, default='', null=True, verbose_name='текст задания')),
                ('difficulty', models.CharField(blank=True, choices=[('0', 'Очень простая'), ('1', 'Простая'), ('2', 'Средняя'), ('3', 'Сложная'), ('4', 'Легендарная')], max_length=255, null=True, verbose_name='сложность')),
                ('rating', models.PositiveIntegerField(default=0, help_text='рассчитывается автоматически', verbose_name='рейтинг')),
                ('rating_total', models.PositiveIntegerField(default=0, verbose_name='количество решений')),
                ('rating_success', models.PositiveIntegerField(default=0, verbose_name='количество успешных решений')),
                ('tests', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=list, null=True, verbose_name='автотесты')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='автор')),
                ('source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tasks.Source', verbose_name='источник')),
                ('tags', models.ManyToManyField(blank=True, related_name='tasks', to='tasks.Tag', verbose_name='метки')),
                ('testing_checker', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tasks.Checker', verbose_name='Функция сверки решения с тестами')),
            ],
            options={
                'verbose_name': 'задача',
                'verbose_name_plural': 'задачи',
                'ordering': ('order_key',),
            },
        ),
        migrations.CreateModel(
            name='TaskItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('show', models.BooleanField(default=True, verbose_name='отображать')),
                ('type', models.CharField(choices=[('course', 'Курс'), ('taskbook', 'Задачник'), ('external', 'Внешний источник')], max_length=100, verbose_name='источник задачи')),
                ('max_score', models.PositiveIntegerField(default=5, verbose_name='балл за решение')),
                ('score_method', models.CharField(choices=[('tests', 'Тестирование кода'), ('review', 'Проверка преподавателем'), ('tests_and_review', 'Тестирование и проверка')], default='tests', max_length=50, verbose_name='метод оценивания')),
                ('slug', app.common.fields.TaskItemSlugField(blank=True, max_length=255, null=True, verbose_name='слаг')),
                ('order_key', app.common.fields.OrderField(blank=True, null=True, verbose_name='порядковый номер')),
                ('translator', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('Python3.8', 'Python 3.8'), ('GCC7.4', 'С++ (GCC 7.4)'), ('Prolog-D', 'Пролог-Д'), ('PostgreSQL', 'PostgreSQL 13'), ('Pascal', 'PascalABC.NET')], max_length=10000), size=None, verbose_name='транслятор кода')),
                ('database', models.ForeignKey(blank=True, help_text='обязательна для задач по базам данных', null=True, on_delete=django.db.models.deletion.SET_NULL, to='databases.Database', verbose_name='учебная база данных')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='taskitems', to='tasks.Task', verbose_name='задача')),
                ('topic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='taskitems', to='training.Topic')),
            ],
            options={
                'verbose_name': 'задача',
                'verbose_name_plural': 'задачи',
                'ordering': ['order_key'],
            },
        ),
        migrations.CreateModel(
            name='UserPlagStatistics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('type', models.CharField(choices=[('course', 'Курс'), ('taskbook', 'Задачник'), ('external', 'Внешний источник')], max_length=100, verbose_name='источник решения')),
                ('type_id', models.PositiveIntegerField(null=True, verbose_name='идентификатор источника решения')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserStatistics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version_hash', models.CharField(max_length=128)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('type', models.CharField(choices=[('course', 'Курс'), ('taskbook', 'Задачник'), ('external', 'Внешний источник')], max_length=100, verbose_name='источник решения')),
                ('type_id', models.PositiveIntegerField(null=True, verbose_name='идентификатор источника решения')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='solutionexample',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='solution_examples', to='tasks.Task'),
        ),
        migrations.AddField(
            model_name='solution',
            name='external_source',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='solutions', to='tasks.Source', verbose_name='внешний источник решения'),
        ),
        migrations.AddField(
            model_name='solution',
            name='reviewer',
            field=models.ForeignKey(help_text='заполняется автоматически, когда преподаватель выставляет оценку', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_solutions', to=settings.AUTH_USER_MODEL, verbose_name='преподаватель'),
        ),
        migrations.AddField(
            model_name='solution',
            name='task',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='solutions', to='tasks.Task', verbose_name='задача'),
        ),
        migrations.AddField(
            model_name='solution',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='solutions', to=settings.AUTH_USER_MODEL, verbose_name='пользователь'),
        ),
        migrations.AddField(
            model_name='draft',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task'),
        ),
        migrations.AddField(
            model_name='draft',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ExternalSolution',
            fields=[
            ],
            options={
                'verbose_name': 'внешнее решение',
                'verbose_name_plural': 'внешние решения',
                'ordering': ('-created',),
                'proxy': True,
                'indexes': [],
            },
            bases=('tasks.solution',),
        ),
        migrations.AlterUniqueTogether(
            name='userstatistics',
            unique_together=set([('user', 'type', 'type_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='userplagstatistics',
            unique_together=set([('user', 'type', 'type_id')]),
        ),
    ]
